generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

model List {
  id               String  @id @default(cuid())
  title            String
  backgroundColour String
  userId           String?
  user             User?   @relation(fields: [userId], references: [id])
  Todo             Todo[]
  Group            Group?  @relation(fields: [groupId], references: [id])
  groupId          String?
}

model Todo {
  id           String    @id @default(cuid())
  title        String
  content      String?
  userId       String?
  listId       String?
  priority     Priority  @default(LOW)
  status       Status    @default(PENDING)
  deadline     DateTime?
  notification String?
  List         List?     @relation(fields: [listId], references: [id])
  User         User?     @relation(fields: [userId], references: [id])
}

model Group {
  id      String      @id @default(cuid())
  title   String
  ownerId String
  owner   User        @relation(fields: [ownerId], references: [id])
  lists   List[]
  members GroupUser[]
}

model GroupUser {
  id        String  @id @default(cuid())
  group     Group   @relation(fields: [groupId], references: [id])
  groupId   String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  userAdmin Boolean @default(false)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  Account       Account[]
  List          List[]
  Session       Session[]
  todos         Todo[]
  GroupUser     GroupUser[]
  Group         Group[]

  @@map("users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
